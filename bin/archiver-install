#!/usr/bin/env ruby 
Separator = 50.times.map{"-"}.join
Allowed_instrument_types = %w{LCQ LTQ LXQ ORBI FT}
$LOAD_PATH.unshift(File.join(File.expand_path(File.dirname(__FILE__)), "../lib"))

require 'yaml'
opts = {}
puts "This will build a local installation of the application"

puts "You'll just need to answer a few questions for me first... "
if File.exist?('archiver_config.yml') 
  puts "WAIT...\n#{Separator}\n\tDo you want to use the settings I found in 'archiver_config.yml' instead of making your own?  It will overwrite the file...\n#{Separator}"
  print "(Y or N): "
  opts[:overwrite] = gets.chomp.downcase == ('y')
end


node = nil
while node.nil?
  puts "Archiver runs in a few different ways... Which one is most accurate on this install: \n 1) Server node which will run an Apache or Rails server\n 2) Metric node (Windows) machine with Xcalibur libraries installed. \n 3) Data acquisition workstation with opportunity to fork into Xcalibur for run-time automation of Archiver"
  print "Enter your number choice: "
  choice = gets.chomp
  node = case choice
    when 1.to_s
      :server
    when 2.to_s
      :metrics
    when 3.to_s
      :instrument
    else puts "Retry"
  end
end
opts[:node] = node
puts "Setting up for #{opts[:node].to_s} mode..." 

puts "Great, thanks"
puts Separator
puts "I'll need to know the path to the shared location from this computer.  Give me the complete, synactically valid path to the root location.  I'll add the '\db' and '\log' paths afterwards.  Your data will be stored by 'GROUP/username' from this location."
print "Archiver Root: "
arch_root = gets.chomp

puts "Let's talk about the metrics."

# The filter configuration block
print "First off, do you want to automate any alerts? \n (Y or N)"
opts[:set_up_alerts] = gets.chomp.downcase == ('y')

if opts[:set_up_alerts]
  puts "Great, we'll set up processing filters based upon some settings we'll configure right now."
  puts "To what address would you like to send alert emails?"
  print "email address:"
  addy = gets.chomp
# Quality control filters
  puts "We will set up filters so that if a RAW file is named a certain way, it will automatically trigger email/website alerts that inform you of the findings.  This way, you can be instantly apprised of any problems in your data runs."
  puts "As an example, this is one of the filters I have set up:\n name: \"Tryptic BSA digest standard\"\t\t filter: \"QC_bsa\"\n This way, if I name a file 'QC_bsa_experiment-211_sample-3.raw' then it will trigger alerts when it runs and parses the metrics"
  continue = true 
  qc_array = []
  while continue
    print "First, I'll need a name for this filter: "
    name = gets.chomp
    puts "Next, I'll need a filter to use for parsing the filenames and determining if alerts should be generated.\n This string will be used as a literal comparison with the filenames."
    print "Filter string:"
    filter = gets.chomp
    puts Separator
    print "Would you like to configure another filter? \n (Y or N)"
    continue = gets.chomp.downcase == "y"
    filename = "#{name}.yml"
    File.open(filename, 'w') {|out| out.print Qc_defaults.deeper_merge({alert_email: addy }).to_yaml }
    qc_array << { :name => name, :filter => filter , :filename => filename}
  end #while continue
  puts "Great. I'll set that up and write default settings to (a) file(s) for you."  
  puts "I wrote this/these file(s) with default settings for you."
  qc_array.each {|hash| puts "Name: #{hash[:name]}\t\t\t File: #{hash[:filename]}" }
end

#--------------------------------------------------
# Setup
puts Separator
puts "Well, I think I have everything I need, so I'm going to get to work..." 

# Prep work:
  require 'fileutils'
  # PREPARE DATABASES
  FileUtils.cp 'config/database.yml.example', 'config/database.yml'
  File.open('config/database.yml', 'w') do |f|
    File.readlines('config/database.yml.example').each do |line|
      if line[/<% ChangeThisVariableBlock %>/]
        f.puts line.chomp.sub(/<% ChangeThisVariableBlock %>/, "#{File.join(arch_root, 'db')}")
      else
        f.puts line.chomp
      end
    end
  end #File.open
# Make the subdirectories the system needs
begin
  %w(db tmp log).each {|name| puts FileUtils.mkdir_p(File.join(arch_root, name)) }
rescue Errno::EACCES => e
  puts "Cannot access destination...\n#{e}"
end

# Load application
require 'archiver'
require 'config'
system = case RbConfig::CONFIG['host_os']
  when "mingw32"
    'Windows'
  when 'darwin'
    'OSX'
  when 'linux-gnu'
    "Linux"
end
tmp = { :nodes => {opts[:node] => {:system => system, :archive_root => arch_root } } }
#

if opts[:set_up_alerts]
  AppConfig = tmp.merge({ quality_control: AppConfig[:quality_control] }) 
else
  AppConfig = tmp
end 

# Conditional stuff
if opts[:node] == :metrics 

# Generic Metrics configuration options
  puts "NIST metrics need to know a few things about each sample before they can run.  Each sample can be defined separately by defining command line arguments to #{__FILE__}.  If not defined there, they will default to these settings. "
  puts "First, I'll need to know where you've installed the NISTMSQC directory."
  print "Location:"
  nist_dir = gets.chomp
# TODO validate directory
  print "Default 'instrument_type': \t\t\t\t\t(allowable values: #{Allowed_instrument_types.join(',')})"
  instrument_type = gets.chomp
  while not Allowed_instrument_types.include? instrument_type
    puts "Error, unacceptable instrument type" 
    puts "Default 'instrument_type': \t\t\t\t\t(allowable values: #{Allowed_instrument_types.join(',')})"
    instrument_type = gets.chomp
  end
  puts "You can install more library files from the NIST website and enable more options.  For now, your allowable library choices are: \n#{Dir.glob(nist_dir+'/libs/*.fasta').join(', ')}"
  puts "Default 'library' file:"
  default_library = gets.chomp
  AppConfig = tmp.merge( default_lib: default_library, default_instrument: instrument_type, nist_dir: nist_dir)
end

if opts[:node] == :instrument 
  puts "instrument"
  AppConfig = tmp
end


#install
  system 'gem build archiver.gemspec'
  #TODO system "gem install archiver-#{Archiver::VERSION}"
  system "gem install archiver-*.gem"
  system "gem install bundler"
  system "bundle install"


  system 'bundle exec rake db:autoupgrade'

if opts[:node] == :server
  if RbConfig::CONFIG['host_os'] == 'linux-gnu'
    # system 'gem install passenger'  # This should have already been done... 
    putsv "Installing passenger-apache2-module" 
    unless system 'passenger-install-apache2-module'
      puts "Please run 'passenger-install-apache2-module' and follow the instructions given therein"
      puts "Press any key when done... "
      gets.chomp
    end
  end
end

  puts "Everything should now be working... If not, read this script and see if you can see where things have gone wrong.  If nothing else works, contact the developer via github."

##CONCLUSION
  arch_config = YAML.load_file("archiver_config.yml") if File.exists?("archiver_config.yml")
  putsv AppConfig
  putsv 50*"-"
  putsv arch_config
  putsv 50*"="
  putsv AppConfig - arch_config

if opts[:overwrite] or not File.exists?("archiver_config.yml")
  File.open("archiver_config.yml", 'w') {|out| out.print AppConfig.to_yaml}
end
